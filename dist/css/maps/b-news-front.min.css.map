{"version":3,"sources":["b-news-front/b-news-front.scss","../styles/helpers/_mixins-svg.scss","b-news-front/b-news-front.css","../styles/helpers/_media-queries.scss"],"names":[],"mappings":"AAyDA,4BCyBC,QAAA,aACA,iBAAA,uBACA,gBAAA,UAAA,SC3BC,QAAA,GACA,MAAA,SACA,OAAA,QFoBF,oBAAA,SAAA,WAEI,YAAA,KE3EJ,eACE,WAAA,KACA,QAAA,KAGF,cACE,iBAAA,EAAA,SAAA,EAAA,KAAA,KAAA,EAAA,KACA,QAAA,YAAA,QAAA,YAAA,QAAA,KAGF,qBCYE,iBAAA,EAAA,SAAA,KAAA,KAAA,KDRF,aFQA,QAAA,YAAA,QAAA,YAAA,QAAA,KACI,cAAA,KAAA,UAAA,KACA,YAAA,KEJJ,QFWA,QAAA,YAAA,QAAA,YAAA,QAAA,KACI,OAAA,KAAA,KAAA,EEPJ,mBFYA,QAAA,YAAA,QAAA,YAAA,QAAA,KACI,iBAAA,EAAA,SAAA,EAAA,KAAA,EAIJ,oBACI,iBAAA,EAAA,SAAA,EAAA,KAAA,KAAA,EAAA,KAIJ,mBACI,QAAA,YAAA,QAAA,YAAA,QAAA,KEZF,iBAAA,EAAA,SAAA,EAAA,KAAA,EFeF,iBAAA,aAAA,cAAA,aAAA,gBAAA,aACI,QAAA,EAAA,MACA,mBAAA,SAAA,sBAAA,OAAA,cAAA,OAAA,UAAA,OEXJ,sBFSA,OAAA,EELA,qBACE,UAAA,oBAAA,UAAA,iBAAA,UAAA,YAWF,qBACE,iBAAA,EAAA,SAAA,EAAA,KAAA,KAAA,EAAA,KAGF,yCACE,oBACE,QAAA,KAGF,iBACE,YAAA,MACA,aAAA,MAGF,eACE,QAAA","file":"../b-news-front.min.css","sourcesContent":["@import \"../../styles/helpers/_helpers\";\r\n\r\n.b-news {\r\n    .b__hd {\r\n        .btn {\r\n            @include max-screen(767px) {\r\n                display: none;\r\n            }\r\n        }\r\n    }\r\n\r\n    .b__cont {\r\n        @include max-screen(767px) {\r\n            margin-left: -15px;\r\n            margin-right: -15px;\r\n        }\r\n    }\r\n\r\n    .b__ft {\r\n        margin-top: 30px;\r\n        display: none;\r\n\r\n        @include max-screen(767px) {\r\n            display: block;\r\n        }\r\n    }\r\n}\r\n\r\n.section__row {\r\n    flex: 1 100%;\r\n    display: flex;\r\n\r\n    .title {\r\n        flex: auto;\r\n    }\r\n}\r\n\r\n.presscenter {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding-top: 82px;\r\n}\r\n\r\n.button {\r\n    display: flex;\r\n    margin: 64px 38px 0;\r\n}\r\n\r\n.presscenter__item {\r\n    display: flex;\r\n    flex: 1;\r\n}\r\n\r\n.presscenter__title {\r\n    flex: 1 100%;\r\n}\r\n\r\n.presscenter__text {\r\n    display: flex;\r\n    flex: 1;\r\n    justify-content: space-evenly;\r\n    padding: 0 2.5vw;\r\n    flex-flow: column;\r\n\r\n    h4 {\r\n        margin: 0;\r\n    }\r\n\r\n    a {\r\n        max-width: fit-content;\r\n\r\n        &::after {\r\n            content: \"\";\r\n            @include svgsprite(arrow-right);\r\n            margin-left: 15px;\r\n        }\r\n    }\r\n}\r\n\r\n.presscenter__button {\r\n\r\n    flex: 1 100%;\r\n}","////\r\n/// @author Mike Street\r\n/// @group Sprite\r\n////\r\n\r\n\r\n// The following variable and function originate from the sass-mq library.\r\n// If you have already included it, you can eliminate the below\r\n// https://github.com/sass-mq/sass-mq/blob/master/_mq.scss\r\n\r\n/// Base font size on the `<body>` element\r\n/// @type Number (unit)\r\n$mq-base-font-size: 16px !default;\r\n\r\n/// Convert pixels to ems\r\n///\r\n/// @param {Number} $px - value to convert\r\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\r\n///\r\n/// @example scss\r\n///  $font-size-in-ems: mq-px2em(16px);\r\n///  p { font-size: mq-px2em(16px); }\r\n///\r\n/// @requires $mq-base-font-size\r\n/// @returns {Number}\r\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\r\n\t@if unitless($px) {\r\n\t\t@warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\r\n\t\t@return mq-px2em($px + 0px); // That may fail.\r\n\t}\r\n\r\n\t@else if unit($px)==em {\r\n\t\t@return $px;\r\n\t}\r\n\r\n\t//@return $px;\r\n\t@return ($px / $base-font-size) * 1em;\r\n}\r\n\r\n\r\n/// Set the `$sprite` map\r\n/// @group sprite\r\n$sprite: map-get($icons, sprite) !default;\r\n\r\n/// Retrive an attributes value for a specific icon in the sprite map\r\n/// @param {string} $icon - The name of the icon\r\n/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)\r\n@function sprite-attr($icon, $attr) {\r\n\t$newIcon: map-get($icons, $icon);\r\n\r\n\t@if $newIcon==null {\r\n\t\t@warn \"Can't find an icon with the name #{$icon}\";\r\n\t}\r\n\r\n\t@return map-get($newIcon, $attr);\r\n}\r\n\r\n/// Create a map with the specified icon of attributes\r\n/// @param {string} $icon - The name of the icon\r\n@function icon-attr($icon) {\r\n\t$attr: (width: sprite-attr($icon, width),\r\n\t\t\theight: sprite-attr($icon, height),\r\n\t\t\tx: sprite-attr($icon, backgroundX),\r\n\t\t\ty: sprite-attr($icon, backgroundY));\r\n\r\n\t@return $attr;\r\n}\r\n\r\n/// Get the width of an icon in em\r\n/// @param {string} $icon - The name of the icon\r\n@function icon_width($icon) {\r\n\t@return mq-px2em(sprite-attr($icon, width));\r\n}\r\n\r\n/// Get the height of an icon in em\r\n/// @param {string} $icon - The name of the icon\r\n@function icon_height($icon) {\r\n\t@return mq-px2em(sprite-attr($icon, height));\r\n}\r\n\r\n/// Assign the correct SVG background image and dimensions to the element\r\n%svgsprite {\r\n\tdisplay: inline-block;\r\n\tbackground-image: url(map-get($sprite, svgPath));\r\n\tbackground-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));\r\n}\r\n\r\n\r\n/// Add an SVG sprite icon using em positioning\r\n/// @param {string} $icon - The name of the icon\r\n/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).\r\n/// - `all` ensures the icon has the background, position and size.\r\n/// - `size` is just for dimensions\r\n/// - `bg` just  applies the backgrounds to an element\r\n/// @example scss - Usage\r\n/// .class {\r\n/// \t@include sprite(arrow);\r\n/// \t&:hover {\r\n/// \t\t@include sprite(arrowDown, bg)\r\n/// \t}\r\n/// }\r\n///\r\n/// @example css - Output\r\n/// .class {\r\n/// \tdisplay: inline-block;\r\n/// \tbackground-image: url(\"../img/sprite.svg\");\r\n/// \tbackground-size: 34.25em 32.1875em;\r\n/// }\r\n///\r\n///\r\n/// .class {\r\n/// \twidth: 1.3125em;\r\n/// \theight: 1.3125em;\r\n/// \tbackground-position: -0.3125em -0.3125em;\r\n/// }\r\n/// .class:hover {\r\n/// \tbackground-position: -2.25em -2.25em;\r\n/// }\r\n@mixin svgsprite($icon, $type: all) {\r\n\t@if $type==all {\r\n\t\t// Shares the backgrounds\r\n\t\t@extend %svgsprite;\r\n\t}\r\n\r\n\t$iconMap: icon-attr($icon);\r\n\r\n\t// Outputs dimensions in em\r\n\t@if $type==all or $type==size {\r\n\t\twidth: mq-px2em(map-get($iconMap, width) + 1);\r\n\t\theight: mq-px2em(map-get($iconMap, height) + 1);\r\n\t}\r\n\r\n\t// Outputs background position in em\r\n\t@if $type==all or $type==bg {\r\n\t\tbackground-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);\r\n\t}\r\n}",".presscenter__text a::after {\n  display: inline-block;\n  background-image: url(\"../img/sprite.svg\");\n  background-size: 25.1875em 22.625em;\n}\n\n.b-news .b__ft {\n  margin-top: 30px;\n  display: none;\n}\n\n.section__row {\n  flex: 1 100%;\n  display: flex;\n}\n\n.section__row .title {\n  flex: auto;\n}\n\n.presscenter {\n  display: flex;\n  flex-wrap: wrap;\n  padding-top: 82px;\n}\n\n.button {\n  display: flex;\n  margin: 64px 38px 0;\n}\n\n.presscenter__item {\n  display: flex;\n  flex: 1;\n}\n\n.presscenter__title {\n  flex: 1 100%;\n}\n\n.presscenter__text {\n  display: flex;\n  flex: 1;\n  justify-content: space-evenly;\n  padding: 0 2.5vw;\n  flex-flow: column;\n}\n\n.presscenter__text h4 {\n  margin: 0;\n}\n\n.presscenter__text a {\n  max-width: fit-content;\n}\n\n.presscenter__text a::after {\n  content: \"\";\n  width: 1.8125em;\n  height: 0.5625em;\n  background-position: -16.25em -11.5625em;\n  margin-left: 15px;\n}\n\n.presscenter__button {\n  flex: 1 100%;\n}\n\n@media only screen and (max-width: 767px) {\n  .b-news .b__hd .btn {\n    display: none;\n  }\n\n  .b-news .b__cont {\n    margin-left: -15px;\n    margin-right: -15px;\n  }\n\n  .b-news .b__ft {\n    display: block;\n  }\n}","//  Author: Rafal Bromirski\r\n//  www: http://rafalbromirski.com/\r\n//  github: http://github.com/paranoida/sass-mediaqueries\r\n//\r\n//  Licensed under a MIT License\r\n//\r\n//  Version:\r\n//  1.6.1\r\n\r\n// --- generator ---------------------------------------------------------------\r\n\r\n@mixin mq($args...) {\r\n  $media-type: 'only screen';\r\n  $media-type-key: 'media-type';\r\n  $args: keywords($args);\r\n  $expr: '';\r\n\r\n  @if map-has-key($args, $media-type-key) {\r\n    $media-type: map-get($args, $media-type-key);\r\n    $args: map-remove($args, $media-type-key);\r\n  }\r\n\r\n  @each $key, $value in $args {\r\n    @if $value {\r\n      $expr: \"#{$expr} and (#{$key}: #{$value})\";\r\n    }\r\n  }\r\n\r\n  @media #{$media-type} #{$expr} {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- screen ------------------------------------------------------------------\r\n\r\n@mixin screen($min, $max, $orientation: false) {\r\n  @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen($max) {\r\n  @include mq($max-width: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen($min) {\r\n  @include mq($min-width: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin screen-height($min, $max, $orientation: false) {\r\n  @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen-height($max) {\r\n  @include mq($max-height: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen-height($min) {\r\n  @include mq($min-height: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdpi --------------------------------------------------------------------\r\n\r\n@mixin hdpi($ratio: 1.3) {\r\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\r\n  only screen and (min-resolution: #{round($ratio*96)}dpi) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdtv --------------------------------------------------------------------\r\n\r\n@mixin hdtv($standard: '1080') {\r\n  $min-width: false;\r\n  $min-height: false;\r\n\r\n  $standards: ('720p', 1280px, 720px)\r\n              ('1080', 1920px, 1080px)\r\n              ('2K', 2048px, 1080px)\r\n              ('4K', 4096px, 2160px);\r\n\r\n  @each $s in $standards {\r\n    @if $standard == nth($s, 1) {\r\n      $min-width: nth($s, 2);\r\n      $min-height: nth($s, 3);\r\n    }\r\n  }\r\n\r\n  @include mq(\r\n    $min-device-width: $min-width,\r\n    $min-device-height: $min-height,\r\n    $min-width: $min-width,\r\n    $min-height: $min-height\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone4 -----------------------------------------------------------------\r\n\r\n@mixin iphone4($orientation: false) {\r\n  $min: 320px;\r\n  $max: 480px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '2/3';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone5 -----------------------------------------------------------------\r\n\r\n@mixin iphone5($orientation: false) {\r\n  $min: 320px;\r\n  $max: 568px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '40/71';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 -----------------------------------------------------------------\r\n\r\n@mixin iphone6($orientation: false) {\r\n  $min: 375px;\r\n  $max: 667px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 plus ------------------------------------------------------------\r\n\r\n@mixin iphone6-plus($orientation: false) {\r\n  $min: 414px;\r\n  $max: 736px;\r\n  $pixel-ratio: 3;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad (all) --------------------------------------------------------------\r\n\r\n@mixin ipad($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad-retina -------------------------------------------------------------\r\n\r\n@mixin ipad-retina($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- orientation -------------------------------------------------------------\r\n\r\n@mixin landscape() {\r\n  @include mq($orientation: landscape) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin portrait() {\r\n  @include mq($orientation: portrait) {\r\n    @content;\r\n  }\r\n}\r\n"]}